{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sumitjumwalADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q3_advance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "DatabaseFromSQL"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ADLS_JSON_LS",
								"type": "LinkedServiceReference"
							},
							"name": "JSON",
							"rejectedDataLinkedService": {
								"referenceName": "ADLS_JSON_LS",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AssignRow"
						},
						{
							"name": "DeletDuplicate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CID as integer,",
						"          Name as string,",
						"          mailid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'dummy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DatabaseFromSQL",
						"DatabaseFromSQL window(over(Name),",
						"     asc(Name, true),",
						"     Rn = rowNumber()) ~> AssignRow",
						"AssignRow alterRow(deleteIf(greater(Rn,1))) ~> DeletDuplicate",
						"DeletDuplicate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'landing',",
						"     folderPath: 'Customer',",
						"     partitionFileNames:['Duplicate_deleted'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> JSON"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ADLS_CSV_LS",
								"type": "LinkedServiceReference"
							},
							"name": "ProductCSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "temp"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as double,",
						"          ListPrice as double,",
						"          Size as string,",
						"          Weight as double,",
						"          ProductCategoryID as short,",
						"          ProductModelID as short,",
						"          SellStartDate as string,",
						"          SellEndDate as string,",
						"          DiscontinuedDate as string,",
						"          ThumbNailPhoto as string,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'landing',",
						"     folderPath: 'Product',",
						"     fileName: 'ProductCSV',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> ProductCSV",
						"filter1 aggregate(groupBy(ProductCategoryID,",
						"          Name),",
						"     ListPrice = max(ListPrice)) ~> aggregate1",
						"ProductCSV filter(notEquals(Color,'Blue')) ~> filter1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'Test',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'test2',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> temp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FindDuplicate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "DeleteInSink"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "DeletAlter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          LastName_prev as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'duplicate',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> Source",
						"Source window(over(LastName),",
						"     asc(CustomerID, true),",
						"     RowNumber = rowNumber()) ~> window1",
						"window1 alterRow(deleteIf(RowNumber>1)) ~> DeletAlter",
						"DeletAlter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'duplicate',",
						"     insertable: false,",
						"     updateable: false,",
						"     deletable: true,",
						"     upsertable: false,",
						"     keys:['CustomerID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteInSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FindDuplicate_to_CSV')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ADLS_CSV_LS",
								"type": "LinkedServiceReference"
							},
							"name": "DeleteInSink"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "DeletAlter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          LastName_prev as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'duplicate',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> Source",
						"Source window(over(LastName),",
						"     asc(CustomerID, true),",
						"     RowNumber = rowNumber()) ~> window1",
						"window1 alterRow(deleteIf(RowNumber>1)) ~> DeletAlter",
						"DeletAlter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'landing',",
						"     folderPath: 'CSV',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['DeletedDuplicateCustomer'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DeleteInSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD2_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "Destination"
						},
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "InsertEvrything"
						},
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "UpdateFlagwhenexist"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "SourceFlag"
						},
						{
							"name": "filter2"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          Flag as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'destination',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> Destination",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'Source',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source",
						"source, Destination join(source@CustomerID == Destination@CustomerID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          CustomerID = source@CustomerID,",
						"          NameStyle = source@NameStyle,",
						"          Title = source@Title,",
						"          FirstName = source@FirstName,",
						"          MiddleName = source@MiddleName,",
						"          LastName = source@LastName,",
						"          Suffix = source@Suffix,",
						"          CompanyName = source@CompanyName,",
						"          SalesPerson = source@SalesPerson,",
						"          EmailAddress = source@EmailAddress,",
						"          Phone = source@Phone,",
						"          PasswordHash = source@PasswordHash,",
						"          PasswordSalt = source@PasswordSalt,",
						"          rowguid = source@rowguid,",
						"          ModifiedDate = source@ModifiedDate,",
						"          destFlag = Flag",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select1",
						"select1 derive(SourceColumn = 1) ~> SourceFlag",
						"select1 filter(destFlag == 1) ~> filter2",
						"filter2 alterRow(updateIf(1==1)) ~> alterRow1",
						"alterRow1 derive(Flag = 0) ~> derivedColumn1",
						"SourceFlag sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          Flag as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'destination',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          NameStyle,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          Suffix,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          Phone,",
						"          PasswordHash,",
						"          PasswordSalt,",
						"          rowguid,",
						"          ModifiedDate,",
						"          Flag = SourceColumn",
						"     )) ~> InsertEvrything",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          Flag as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'destination',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CustomerID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          NameStyle,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          Suffix,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          Phone,",
						"          PasswordHash,",
						"          PasswordSalt,",
						"          rowguid,",
						"          ModifiedDate,",
						"          Flag",
						"     )) ~> UpdateFlagwhenexist"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "DestinationCustomer"
						},
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "SourceCustomer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "Updatesink"
						},
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "InserSink"
						}
					],
					"transformations": [
						{
							"name": "JoinmatchingCID"
						},
						{
							"name": "MatchingRow"
						},
						{
							"name": "select1"
						},
						{
							"name": "MakeRowsalter"
						},
						{
							"name": "NotexistentRow"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          LastName_prev as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'SCD3_destination',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DestinationCustomer",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'SCD3_Source',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> SourceCustomer",
						"SourceCustomer, DestinationCustomer join(SourceCustomer@CustomerID == DestinationCustomer@CustomerID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinmatchingCID",
						"JoinmatchingCID filter(!isNull(DestinationCustomer@CustomerID)) ~> MatchingRow",
						"MatchingRow select(mapColumn(",
						"          CustomerID = SourceCustomer@CustomerID,",
						"          NameStyle = SourceCustomer@NameStyle,",
						"          Title = SourceCustomer@Title,",
						"          FirstName = SourceCustomer@FirstName,",
						"          MiddleName = SourceCustomer@MiddleName,",
						"          SourceLastName = SourceCustomer@LastName,",
						"          Suffix = SourceCustomer@Suffix,",
						"          CompanyName = SourceCustomer@CompanyName,",
						"          SalesPerson = SourceCustomer@SalesPerson,",
						"          EmailAddress = SourceCustomer@EmailAddress,",
						"          Phone = SourceCustomer@Phone,",
						"          PasswordHash = SourceCustomer@PasswordHash,",
						"          PasswordSalt = SourceCustomer@PasswordSalt,",
						"          rowguid = SourceCustomer@rowguid,",
						"          ModifiedDate = SourceCustomer@ModifiedDate,",
						"          DestinationLastname = DestinationCustomer@LastName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select1",
						"select1 alterRow(updateIf(DestinationLastname!=SourceLastName)) ~> MakeRowsalter",
						"JoinmatchingCID filter(isNull(DestinationCustomer@CustomerID)) ~> NotexistentRow",
						"NotexistentRow select(mapColumn(",
						"          CustomerID = SourceCustomer@CustomerID,",
						"          NameStyle = SourceCustomer@NameStyle,",
						"          Title = SourceCustomer@Title,",
						"          FirstName = SourceCustomer@FirstName,",
						"          MiddleName = SourceCustomer@MiddleName,",
						"          LastName = SourceCustomer@LastName,",
						"          Suffix = SourceCustomer@Suffix,",
						"          CompanyName = SourceCustomer@CompanyName,",
						"          SalesPerson = SourceCustomer@SalesPerson,",
						"          EmailAddress = SourceCustomer@EmailAddress,",
						"          Phone = SourceCustomer@Phone,",
						"          PasswordHash = SourceCustomer@PasswordHash,",
						"          PasswordSalt = SourceCustomer@PasswordSalt,",
						"          rowguid = SourceCustomer@rowguid,",
						"          ModifiedDate = SourceCustomer@ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select2",
						"MakeRowsalter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'SCD3_destination',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CustomerID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          NameStyle,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName = SourceLastName,",
						"          Suffix,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          Phone,",
						"          PasswordHash,",
						"          PasswordSalt,",
						"          rowguid,",
						"          ModifiedDate,",
						"          LastName_prev = DestinationLastname",
						"     )) ~> Updatesink",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'SCD3_destination',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          NameStyle,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          Suffix,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          Phone,",
						"          PasswordHash,",
						"          PasswordSalt,",
						"          rowguid,",
						"          ModifiedDate",
						"     )) ~> InserSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignement8_Q3_advance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Assignment8_Q3_advance",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DatabaseFromSQL": {},
									"JSON": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-27T03:45:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Assignment8_Q3_advance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment10_Q2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_country",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@createArray('india','us','uk','china','russia')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "REST_DS",
											"type": "DatasetReference",
											"parameters": {
												"CountryName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CSV_FILE_DS",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@concat(item(),'.CSV')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Failed_Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach_country",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-54.eastus.logic.azure.com:443/workflows/76e0463aa16e4c7784cb9e171a96a28b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=34NReotWMEIIUn7rcBooiKgvP59osQn6o9eq0w6rWCE",
							"method": "POST",
							"headers": {},
							"body": {
								"Sendto": "sumitjumwal1996@gmail.com",
								"FailedMessage": "This Pipeline is failled : Assignement10_Q2",
								"Status": "Failed",
								"Subject": "Pipeline failed Assignment10_Q2"
							}
						}
					},
					{
						"name": "Successs_Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach_country",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-54.eastus.logic.azure.com:443/workflows/76e0463aa16e4c7784cb9e171a96a28b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=34NReotWMEIIUn7rcBooiKgvP59osQn6o9eq0w6rWCE",
							"method": "POST",
							"headers": {},
							"body": {
								"Sendto": "sumitjumwal1996@gmail.com",
								"FailedMessage": "This Pipeline ran ok : Assignement10_Q2",
								"Status": "Failed",
								"Subject": "Pipeline ok Assignment10_Q2"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment10_Q6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CSVtoJSON",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CSV_FILE_DS",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "india.CSV"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "JSON_DS",
								"type": "DatasetReference",
								"parameters": {
									"Filepath": "JSON"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment7_Q3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_meta",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSV_DS",
								"type": "DatasetReference",
								"parameters": {
									"FilePath": "CSV"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "For_activity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_meta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_meta').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "coheck_filename",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().type,'File'),equals(item().name,'ADF-copy.csv'))\n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy data1_copy1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "CSV_FILE_DS",
														"type": "DatasetReference",
														"parameters": {
															"Filename": {
																"value": "ADF-copy.csv",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "SQL_Generic_DS",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "Test",
															"SchemaName": "SalesLT"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-15T01:05:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment7_Q4_incremental_pipeline_HW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HW_VALUE",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "HW_SQL_DS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get_last_Date_modified",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "HW_VALUE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(ModifiedDate) as lastmodifieddate from SalesLT.Customer",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Generic_DS",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Customer",
									"SchemaName": "SalesLT"
								}
							}
						}
					},
					{
						"name": "Copy_Customer_to_customer_Copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get_last_Date_modified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from SalesLT.Customer where ModifiedDate > '@{activity('HW_VALUE').output.firstRow.HWdate}' and ModifiedDate <= '@{activity('Get_last_Date_modified').output.firstRow.lastmodifieddate}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"CustomerID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_Generic_DS",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Customer",
									"SchemaName": "SalesLT"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Generic_DS",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Customer_copy",
									"SchemaName": "SalesLT"
								}
							}
						]
					},
					{
						"name": "Update HW Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_Customer_to_customer_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select 'Customer' as TableName,'@{activity('Get_last_Date_modified').output.firstRow.lastmodifieddate}' as HWtable",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"TableName"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TableName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TableName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "HWtable",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "HWdate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "HW_SQL_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "HW_SQL_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-22T18:41:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment7_Q4_incremental_pipeline_HW_Custom')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_last_Date_modified",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select max(ModifiedDate) as lastmodifieddate from SalesLT.@{pipeline().parameters.TableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Generic_DS",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Customer",
									"SchemaName": "SalesLT"
								}
							}
						}
					},
					{
						"name": "Copy_Customer_to_customer_Copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get_last_Date_modified",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "HW_VALUE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from SalesLT.@{pipeline().parameters.TableName} where ModifiedDate > '@{activity('HW_VALUE').output.firstRow.HWdate}' and ModifiedDate <= '@{activity('Get_last_Date_modified').output.firstRow.lastmodifieddate}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": {
										"value": "@createArray(pipeline().parameters.Keycolumn)",
										"type": "Expression"
									}
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ProductNumber",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ProductNumber",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Color",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Color",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "StandardCost",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "StandardCost",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "ListPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "ListPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "Size",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Size",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Weight",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 8
										},
										"sink": {
											"name": "Weight",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 8
										}
									},
									{
										"source": {
											"name": "ProductCategoryID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductCategoryID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ProductModelID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductModelID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SellStartDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "SellStartDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "SellEndDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "SellEndDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "DiscontinuedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "DiscontinuedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ThumbNailPhoto",
											"type": "Byte[]",
											"physicalType": "varbinary"
										},
										"sink": {
											"name": "ThumbNailPhoto",
											"type": "Byte[]",
											"physicalType": "varbinary"
										}
									},
									{
										"source": {
											"name": "ThumbnailPhotoFileName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ThumbnailPhotoFileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_Generic_DS",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"SchemaName": "SalesLT"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Generic_DS",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@concat(pipeline().parameters.TableName,'_copy')",
										"type": "Expression"
									},
									"SchemaName": "SalesLT"
								}
							}
						]
					},
					{
						"name": "Update HW Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_Customer_to_customer_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select '@{pipeline().parameters.TableName}' as TableName,'@{activity('Get_last_Date_modified').output.firstRow.lastmodifieddate}' as HWtable",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"TableName"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TableName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TableName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "HWtable",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "HWdate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "HW_SQL_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "HW_SQL_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "HW_VALUE",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select HWdate from dbo.HWtable where TableName = '@{pipeline().parameters.TableName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "HW_SQL_DS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"Keycolumn": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-23T08:25:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q1_ADVANCE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Assignment8_Advance",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSVSource": {},
									"Sinktodb": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-26T04:02:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q1_data_flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Assignment8_Q1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSVCustomer": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-23T11:57:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Assignment8_Q2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Assignment8_Q2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customersource": {},
									"CustomerSourceAddr": {},
									"Adress": {},
									"SinkToJSON": {},
									"SinktoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-23T12:46:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q2_own')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "customeraddress",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Assignment8_Q2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customersource": {},
									"CustomerSourceAddr": {},
									"Adress": {},
									"SinkToJSON": {},
									"SinktoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-23T14:04:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Assignment8_Q3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SQLCustomer": {},
									"CustomerAddrCSV": {},
									"sinkTOparquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-23T17:09:55Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Assignment8_Q4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProductCSV": {},
									"sink1": {},
									"temp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-24T02:13:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Assignment8_Q4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeletDuplicate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FindDuplicate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"DeleteInSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-08T02:06:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FindDuplicate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Foreach_Example')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Foreach_Example",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@createArray('Customer','CustomerAddress')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Foreach_Example_copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SQL_Generic_DS",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item()",
													"type": "Expression"
												},
												"SchemaName": "SalesLT"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CSV_DS",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": "ForEach_copy_example"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-05T02:37:47Z"
			},
			"dependsOn": []
		}
	]
}