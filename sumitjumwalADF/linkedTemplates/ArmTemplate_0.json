{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sumitjumwalADF"
		},
		"ADLS_CSV_LS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLS_CSV_LS'"
		},
		"ADLS_JSON_LS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLS_JSON_LS'"
		},
		"SQL_Sample_database_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL_Sample_database'"
		},
		"ADLS_CSV_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://athiranambiar1991.dfs.core.windows.net/"
		},
		"ADLS_JSON_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://athiranambiar1991.dfs.core.windows.net/"
		},
		"RESTApi_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://restcountries.com/v3.1/all"
		},
		"storage_trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/b48c28de-b7cd-4176-a809-6e3f48e95165/resourceGroups/DataEngineering/providers/Microsoft.Storage/storageAccounts/athiranambiar1991"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/trigger_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_CSV_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS_CSV_LS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLS_CSV_LS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_JSON_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS_JSON_LS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLS_JSON_LS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RESTApi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RESTApi_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Sample_database')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQL_Sample_database_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_CSV_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilePath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().FilePath",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_CSV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_FILE_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_CSV_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": "CSV",
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "COL1",
						"type": "String"
					},
					{
						"name": "COL2",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_CSV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_CSV_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ADF-copy.csv",
						"folderPath": "CSV",
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "COL1\tCOL2",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_CSV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HW_SQL_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_Sample_database",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "HWtable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_Sample_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JSON_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_JSON_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filepath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS_DS"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Filepath",
							"type": "Expression"
						},
						"fileSystem": "landing"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_JSON_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_ASSIGNMENT5_Q6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_JSON_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "test2.json",
						"folderPath": "CSV",
						"fileSystem": "landing"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_JSON_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REST_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RESTApi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RESTApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Generic_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_Sample_database",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "SalesLT"
					}
				},
				"folder": {
					"name": "SQL Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_Sample_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "trigger_test",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/landing/blobs/CSV/Customer",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('storage_trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/trigger_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "trigger_test",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2023-08-14T17:09:00",
						"endTime": "2023-08-15T05:09:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/trigger_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Advance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ADLS_CSV_LS",
								"type": "LinkedServiceReference"
							},
							"name": "CSVSource"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "Sinktodb"
						}
					],
					"transformations": [
						{
							"name": "SelectOddCustid"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as short,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'landing',",
						"     fileName: 'customer',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> CSVSource",
						"CSVSource filter(notEquals(mod(CustomerID,2),0)) ~> SelectOddCustid",
						"alterRow1 select(mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          EmailAddress",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"SelectOddCustid alterRow(upsertIf(true())) ~> alterRow1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CID as integer,",
						"          Name as string,",
						"          mailid as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'dummy',",
						"     insertable: false,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: true,",
						"     keys:['CID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CID = CustomerID,",
						"          Name = FirstName,",
						"          mailid = EmailAddress",
						"     )) ~> Sinktodb"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_CSV_LS')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_Sample_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ADLS_CSV_LS",
								"type": "LinkedServiceReference"
							},
							"name": "CSVCustomer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as date 'MM/dd/yyyy'",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'landing',",
						"     fileName: 'customer',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> CSVCustomer",
						"CSVCustomer filter(mod(CustomerID,2) == 0) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'Customer_copy',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          NameStyle,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          Suffix,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          Phone,",
						"          PasswordHash,",
						"          PasswordSalt,",
						"          rowguid,",
						"          ModifiedDate",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_CSV_LS')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_Sample_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ADLS_CSV_LS",
								"type": "LinkedServiceReference"
							},
							"name": "Customersource"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_CSV_LS",
								"type": "LinkedServiceReference"
							},
							"name": "CustomerSourceAddr"
						},
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "Adress"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ADLS_JSON_LS",
								"type": "LinkedServiceReference"
							},
							"name": "SinkToJSON"
						},
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "SinktoSQL"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "joinaddress"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as short,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'landing',",
						"     fileName: 'customer',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> Customersource",
						"source(output(",
						"          CustomerID as integer,",
						"          AddressID as integer,",
						"          AddressType as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'landing',",
						"     fileName: 'CustomerAddress',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> CustomerSourceAddr",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'Address',",
						"     isolationLevel: 'READ_COMMITTED') ~> Adress",
						"Customersource, CustomerSourceAddr join(Customersource@CustomerID == CustomerSourceAddr@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"joinaddress select(mapColumn(",
						"          CustomerID = Customersource@CustomerID,",
						"          FirstName,",
						"          AddressID = CustomerSourceAddr@AddressID,",
						"          EmailAddress,",
						"          Phone,",
						"          AddressType,",
						"          City,",
						"          CountryRegion",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"join1, Adress join(CustomerSourceAddr@AddressID == Adress@AddressID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinaddress",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AddressID as short,",
						"          AddressType as string,",
						"          CustomerID as short,",
						"          EmailAddress as string,",
						"          FirstName as string,",
						"          Phone as string",
						"     ),",
						"     format: 'json',",
						"     fileSystem: 'landing',",
						"     folderPath: 'Customer',",
						"     partitionFileNames:['Customeraddr_JSON_dataflow'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkToJSON",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'Test',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinktoSQL"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_CSV_LS')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_Sample_database')]",
				"[concat(variables('factoryId'), '/linkedServices/ADLS_JSON_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "SQLCustomer"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_CSV_LS",
								"type": "LinkedServiceReference"
							},
							"name": "CustomerAddrCSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ADLS_CSV_LS",
								"type": "LinkedServiceReference"
							},
							"name": "sinkTOparquet"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "sortasc"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'Customer',",
						"     isolationLevel: 'READ_COMMITTED') ~> SQLCustomer",
						"source(output(",
						"          CustomerID as integer,",
						"          AddressID as integer,",
						"          AddressType as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'landing',",
						"     fileName: 'CustomerAddress',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> CustomerAddrCSV",
						"SQLCustomer, CustomerAddrCSV join(SQLCustomer@CustomerID == CustomerAddrCSV@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 filter(SQLCustomer@CustomerID > 100 && SQLCustomer@CustomerID < 30000) ~> filter1",
						"filter1 sort(desc(SQLCustomer@CustomerID, true)) ~> sortasc",
						"sortasc select(mapColumn(",
						"          CustomerID = SQLCustomer@CustomerID,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          ModifiedDateSQLDS = SQLCustomer@ModifiedDate,",
						"          AddressID,",
						"          AddressType,",
						"          ModifiedDateCSVDS = CustomerAddrCSV@ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'landing',",
						"     folderPath: 'Customer',",
						"     compressionCodec: 'none',",
						"     partitionFileNames:['CustomerjoinAddress_parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          ModifiedDateSQLDS,",
						"          AddressID,",
						"          AddressType,",
						"          ModifiedDateCSVDS",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkTOparquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_Sample_database')]",
				"[concat(variables('factoryId'), '/linkedServices/ADLS_CSV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment8_Q3_advance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "SQL_Sample_database",
								"type": "LinkedServiceReference"
							},
							"name": "DatabaseFromSQL"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ADLS_JSON_LS",
								"type": "LinkedServiceReference"
							},
							"name": "JSON",
							"rejectedDataLinkedService": {
								"referenceName": "ADLS_JSON_LS",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AssignRow"
						},
						{
							"name": "DeletDuplicate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CID as integer,",
						"          Name as string,",
						"          mailid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'dummy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DatabaseFromSQL",
						"DatabaseFromSQL window(over(Name),",
						"     asc(Name, true),",
						"     Rn = rowNumber()) ~> AssignRow",
						"AssignRow alterRow(deleteIf(greater(Rn,1))) ~> DeletDuplicate",
						"DeletDuplicate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'landing',",
						"     folderPath: 'Customer',",
						"     partitionFileNames:['Duplicate_deleted'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> JSON"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_Sample_database')]",
				"[concat(variables('factoryId'), '/linkedServices/ADLS_JSON_LS')]"
			]
		}
	]
}