{
	"name": "FindDuplicate",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "SQL_Sample_database",
						"type": "LinkedServiceReference"
					},
					"name": "Source"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "SQL_Sample_database",
						"type": "LinkedServiceReference"
					},
					"name": "DeleteInSink"
				}
			],
			"transformations": [
				{
					"name": "window1"
				},
				{
					"name": "DeletAlter"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          NameStyle as boolean,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          LastName_prev as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'duplicate',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> Source",
				"Source window(over(LastName),",
				"     asc(CustomerID, true),",
				"     RowNumber = rowNumber()) ~> window1",
				"window1 alterRow(deleteIf(RowNumber > 1)) ~> DeletAlter",
				"DeletAlter sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'duplicate',",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: true,",
				"     upsertable: false,",
				"     keys:['CustomerID'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> DeleteInSink"
			]
		}
	}
}